function World(e, t) {
    console.log("Creating a new World!"),
    this.room,
    this.player,
    this.events = {},
    this.stage = new createjs.Stage(e),
    this.stage.room = new createjs.Container,
    this.stage.ui = new createjs.Container,
    this.stage.gear = new createjs.Container,
    this.stage.card = new createjs.Container,
    this.stage.beep = new createjs.Container,
    this.stage.addChild(this.stage.room, this.stage.ui, this.stage.gear, this.stage.card, this.stage.beep),
    t && (this.socket = t,
    this.socketHandler(t));
    var a = this;
    createjs.Ticker.framerate = 60,
    createjs.Ticker.on("tick", function(e) {
        a.stage.update(e)
    })
}
function Beep(e, t) {
    this.socket = e || {},
    this.world = t || {},
    this.mc = new createjs.Container;
    var a = this;
    e && e.on("beep", function(e) {
        console.log("beep", e),
        e.item && a.showItem(e.item)
    })
}
function Button(e) {
    createjs.Container.call(this);
    var t = new createjs.Sprite(uxSS,e);
    this.addChild(t)
}
function Code(e, t) {
    this.socket = e,
    this.world = t;
    var a = this;
    t.on("code", function(e) {
        a.handleMessage(e)
    })
}
function ItemIcon(e, t) {
    createjs.Container.call(this),
    this.slotId = t,
    this.itemId = e,
    this.isActive = !1,
    this.handleClick,
    this.background = new createjs.Sprite(uxSS,"item");
    var a = new createjs.Bitmap("media/icons/" + e + ".png");
    a.x = 2,
    a.y = 2,
    a.scaleX = .5,
    a.scaleY = .5,
    this.addChild(this.background, a)
}
function Player(e) {
    this.playerId = e.playerId,
    this.nickname = e.nickname,
    this.critterId = e.critterId,
    this.inventory = e.inventory,
    this.friends = e.friends,
    this.gear = e.gear || {},
    this.status,
    this.level,
    this.weapon,
    this.def = 10,
    this.str = 10,
    this.armour,
    this.isDead,
    this.gold = e.gold,
    this.goldInBank,
    this.xp,
    this.hp = 100,
    this.mp,
    this.gems,
    localStorage.setItem("playerId", this.playerId)
}
function Room(e, t) {
    if (createjs.Container.call(this),
    this.background = new createjs.Container,
    this.foreground = new createjs.Container,
    this.game = new createjs.Container,
    this.balloons = new createjs.Container,
    this.nicknames = new createjs.Container,
    this.player = t,
    this.game.addEventListener("tick", function(e) {
        e.target.children.sort(sortDepth)
    }),
    e.artwork && e.artwork.sprites && (e.artwork.sprites.images[0] = "media/rooms/" + e.artwork.sprites.images[0],
    this.spritesheet = new createjs.SpriteSheet(e.artwork.sprites)),
    this.playerlist = {},
    e.artwork && void 0 !== e.artwork.background) {
        var a = new createjs.Bitmap("media/rooms/" + e.artwork.background);
        this.background.addChild(a)
    }
    if (this.addChild(this.background),
    this.addChild(this.game),
    e.artwork && void 0 !== e.artwork.foreground) {
        var r = new createjs.Bitmap("media/rooms/" + e.artwork.foreground);
        this.foreground.addChild(r)
    }
    if (this.addChild(this.foreground),
    this.addChild(this.nicknames),
    this.addChild(this.balloons),
    e.artwork && void 0 !== e.artwork.props)
        for (var i = 0; i < e.artwork.props.length; i++) {
            var s = e.artwork.props[i]
              , o = new createjs.Sprite(this.spritesheet);
            o.gotoAndStop(s[0]),
            o.x = s[1],
            o.y = s[2],
            this.game.addChild(o)
        }
    if (null != e.playerlist)
        for (i = 0; i < e.playerlist.length; i++)
            this.addPlayer(e.playerlist[i])
}
function sortDepth(e, t) {
    return e.y - t.y
}
function createBalloon(e, t) {
    var a = t + 20
      , r = e + 20
      , i = new createjs.Shape;
    return i.graphics.setStrokeStyle(1).beginStroke("#888888").beginFill("#FFFFFF"),
    i.graphics.moveTo(5, 0).arcTo(r, 0, r, 5, 5).arcTo(r, a, r - 5, a, 5).lineTo(80, a).lineTo(70, a + 10).lineTo(70, a).arcTo(0, a, 0, a - 5, 5).arcTo(0, 0, 5, 0, 5),
    i.x = 0 - r / 2,
    i.y = -10,
    i
}
function BeepItem(e) {
    this.mc = new createjs.Container;
    var t = new createjs.Graphics;
    t.beginFill("black"),
    t.drawRect(0, 100, 850, 200);
    var a = new createjs.Shape(t);
    this.mc.addChild(a);
    var r = new createjs.Bitmap("media/icons/" + e.itemId + ".png");
    r.regX = 80,
    r.regY = 80,
    r.x = 425,
    r.y = 120,
    this.mc.addChild(r),
    e.name && (e.title = e.name);
    var i = new createjs.Text(e.title,"40px Luckiest Guy","#ffffff");
    if (i.textAlign = "center",
    i.lineHeight = 40,
    i.lineWidth = 400,
    i.x = 425,
    i.y = 210,
    this.mc.addChild(i),
    e.text) {
        var s = new createjs.Text(e.text,"16px Arial","#AAAAAA");
        s.textAlign = "center",
        s.lineWidth = 300,
        s.x = 425,
        s.y = 250,
        this.mc.addChild(s)
    }
}
World.prototype.on = function(e, t) {
    "object" != typeof this.events[e] && (this.events[e] = []),
    this.events[e].push(t)
}
,
World.prototype.emit = function(e) {
    var t, a, r, i = [].slice.call(arguments, 1);
    if ("object" == typeof this.events[e])
        for (r = (a = this.events[e].slice()).length,
        t = 0; t < r; t++)
            a[t].apply(this, i)
}
,
World.prototype.socketHandler = function(a) {
    var r = this;
    this.stage;
    a.on("connect", function() {}),
    a.on("disconnect", function() {
        console.log("DISCONNECT")
    }),
    a.on("login", function(e) {
        console.log("login", e);
        var t = new Player(e);
        r.player = t,
        setInterval(function() {
            t.getPlayerId() != t.playerId && a.disconnect()
        }, 1e4),
        a.emit("joinRoom", {
            roomId: "tavern"
        })
    }),
    a.on("message", function(e) {
        console.log("message", e)
    }),
    a.on("joinRoom", function(e) {
        console.log("joinRoom", e),
        r.addRoom(e),
        r.addRoomUI(),
        r.addInventoryScreen()
    }),
    a.on("playerData", function(e) {
        console.log("playerData", e),
        r.player.updateData(e)
    }),
    a.on("roomData", function(e) {
        console.log("roomData", e)
    }),
    a.on("worldData", function(e) {
        console.log("worldData", e)
    }),
    a.on("A", function(e) {
        console.info("A", e),
        r.room.addPlayer(e)
    }),
    a.on("R", function(e) {
        console.info("R", e),
        r.room.removePlayer(e)
    }),
    a.on("G", function(e) {
        console.info("G", e),
        r.room.updateGear(e)
    }),
    a.on("X", function(e) {
        r.room.movePlayer(e)
    }),
    a.on("M", function(e) {
        console.info("M", e),
        r.room.addBalloon(e)
    })
}
,
World.prototype.login = function(e) {
    this.socket.open(),
    this.socket.emit("login", {
        ticket: e
    })
}
,
World.prototype.logout = function() {
    console.log("logout"),
    sessionStorage.clear(),
    this.socket.disconnect(),
    cheerioPath && (document.location.href = cheerioPath)
}
,
World.prototype.sendMessage = function(e) {
    if (console.log("sendMessage", e),
    "/" == (e = e.trim()).substr(0, 1))
        this.emit("code", e);
    else {
        this.socket.emit("sendMessage", {
            message: e
        });
        var t = {
            i: this.player.playerId,
            n: this.player.nickname,
            m: e
        };
        console.info("M", t),
        this.room.addBalloon(t)
    }
}
,
World.prototype.updateGear = function(e) {
    this.socket.emit("updateGear", e)
}
,
World.prototype.addRoom = function(e) {
    console.log("Add Room!", e),
    this.room = new Room(e,this.player),
    this.room.background.on("click", function(e) {
        var t = Math.floor(e.stageX)
          , a = Math.floor(e.stageY);
        socket.emit("click", {
            x: t,
            y: a
        })
    }),
    this.stage.room.addChild(this.room)
}
,
World.prototype.addRoomUI = function() {
    console.log("Add Room UI!");
    var e = new createjs.Container
      , t = new Button("box");
    t.scaleX = .5,
    t.scaleY = .5,
    t.x = 760,
    t.y = 420;
    var a = this;
    t.click(function() {
        a.inventory.show()
    }),
    e.addChild(t),
    this.stage.ui.addChild(e)
}
,
World.prototype.addInventoryScreen = function() {
    console.log("Add Inventory Screen!"),
    this.inventory || (this.inventory = new InventoryScreen(this.player),
    this.inventory.hide(),
    this.stage.gear.addChild(this.inventory))
}
,
Beep.prototype.show = function() {
    var e = this
      , t = new createjs.Graphics;
    t.beginFill("black"),
    t.drawRect(0, 0, 850, 480);
    var a = new createjs.Shape(t);
    a.alpha = .6,
    a.on("click", function() {
        e.close()
    }),
    this.mc.addChild(a),
    this.mc.visible = !0
}
,
Beep.prototype.hide = function() {
    this.mc.visible = !1
}
,
Beep.prototype.close = function() {
    this.mc.removeAllChildren(),
    this.mc.visible = !1
}
,
Beep.prototype.showItem = function(e) {
    this.show();
    var t = new BeepItem(e);
    this.mc.addChild(t.mc)
}
,
Beep.prototype.showCard = function(e) {}
,
Beep.prototype.showWarning = function(e) {}
,
Button.prototype = Object.create(createjs.Container.prototype),
Button.prototype.click = function(e) {
    this.on("click", e)
}
,
Code.prototype.handleMessage = function(e) {
    var t = e.split(" ")
      , a = t.shift().substr(1).toLowerCase();
    switch (a) {
    case "nicknames":
        this.toggleNicknames();
        break;
    case "balloons":
        this.toggleBalloons();
        break;
    default:
        this.socket.emit("code", {
            code: a,
            options: t
        })
    }
}
,
Code.prototype.toggleNicknames = function() {
    var e = this.world.room.nicknames;
    e.visible ? e.visible = !1 : e.visible = !0
}
,
Code.prototype.toggleBalloons = function() {
    var e = this.world.room.balloons;
    e.visible ? e.visible = !1 : e.visible = !0
}
,
ItemIcon.prototype = Object.create(createjs.Container.prototype),
ItemIcon.prototype.click = function(e) {
    this.on("click", e)
}
,
ItemIcon.prototype.setActive = function(e) {
    e ? (this.background.gotoAndStop("item_active"),
    this.isActive = !0) : (this.background.gotoAndStop("item"),
    this.isActive = !1)
}
,
Player.prototype.getPlayerId = function() {
    return localStorage.getItem("playerId")
}
,
Player.prototype.updateData = function(e) {
    console.info("updateData", e),
    e.gear && (this.gear = e.gear),
    e.inventory && this.inventory.push(e.inventory)
}
,
Player.prototype.addItem = function(e) {
    console.log("Player.addItem", e);
    var t = this.getItemFromInventory(e);
    t && (this.gear[t.slot] = t.itemId)
}
,
Player.prototype.removeItem = function(e) {
    console.log("Player.removeItem", e),
    delete this.gear[e]
}
,
Player.prototype.isItemActive = function(e) {
    for (var t in this.gear)
        if (this.gear[t] == e)
            return !0;
    return !1
}
,
Player.prototype.getItemFromInventory = function(e) {
    for (var t = 0; t < this.inventory.length; t++)
        if (this.inventory[t].itemId == e)
            return this.inventory[t]
}
,
Room.prototype = Object.create(createjs.Container.prototype),
Room.prototype.sortDepth = function() {
    this.game.children.sort(sortDepth)
}
,
Room.prototype.addPlayer = function(e) {
    var t = e.i;
    if (null == this.playerlist[t]) {
        var a = new PlayerContainer(e);
        this.player.playerId == e.i && (a.isLocal = !0),
        a.x = e.x,
        a.y = e.y;
        var r = findDirection(e.r);
        a.updateDirection(r),
        a.updateState("stand"),
        this.game.addChild(a),
        this.playerlist[t] = a;
        var i = new createjs.Container;
        i.x = e.x,
        i.y = e.y,
        a.balloon = i,
        this.balloons.addChild(i);
        var s = new createjs.Container;
        s.x = e.x,
        s.y = e.y;
        var o = new createjs.Text(e.n,"12px Arial","#000000");
        o.textAlign = "center",
        o.lineWidth = 100,
        o.y = 15,
        s.addChild(o),
        a.nickname = s,
        this.nicknames.addChild(s)
    }
}
,
Room.prototype.addBalloon = function(e) {
    var t = this.playerlist[e.i]
      , a = new createjs.Container
      , r = new createjs.Text(e.m,"12px Arial","#000000");
    r.textAlign = "center",
    r.lineWidth = 100;
    var i = r.getBounds()
      , s = createBalloon(100, i.height);
    a.addChild(s, r),
    a.y = 0 - i.height - 80,
    t.balloon.addChild(a);
    setTimeout(function() {
        t.balloon.removeChild(a)
    }, 5e3)
}
,
Room.prototype.removePlayer = function(e) {
    var t = this.playerlist[e.i];
    this.game.removeChild(t),
    this.balloons.removeChild(t.balloon),
    this.nicknames.removeChild(t.nickname),
    delete this.playerlist[e.i]
}
,
Room.prototype.updateGear = function(e) {
    var t = this.playerlist[e.i];
    t && t.updateGear(e.g)
}
,
Room.prototype.movePlayer = function(e) {
    var t = this.playerlist[e.i];
    t.isMoving = !0;
    var a = findDirection(e.r);
    t.updateDirection(a),
    t.updateState("move");
    var r = calculateDistance(t.x, t.y, e.x, e.y) * t.speed;
    t.tween = createjs.Tween.get(t, {
        override: !0
    }).to({
        x: e.x,
        y: e.y
    }, r, createjs.Ease.linear).call(function() {
        if (this.isMoving = !1,
        t.updateState("stand"),
        t.nickname.x = t.x,
        t.nickname.y = t.y,
        t.balloon.x = t.x,
        t.balloon.y = t.y,
        t.isLocal) {
            var e = {
                x: t.x,
                y: t.y
            };
            console.log("look", e),
            socket.emit("trigger", {
                x: t.x,
                y: t.y
            })
        }
    }).addEventListener("change", function() {
        t.nickname.x = t.x,
        t.nickname.y = t.y,
        t.balloon.x = t.x,
        t.balloon.y = t.y
    })
}
;
var EventEmitter = function() {
    this.events = {}
};
EventEmitter.prototype.on = function(e, t) {
    "object" != typeof this.events[e] && (this.events[e] = []),
    this.events[e].push(t)
}
,
EventEmitter.prototype.removeListener = function(e, t) {
    var a;
    "object" == typeof this.events[e] && -1 < (a = indexOf(this.events[e], t)) && this.events[e].splice(a, 1)
}
,
EventEmitter.prototype.emit = function(e) {
    var t, a, r, i = [].slice.call(arguments, 1);
    if ("object" == typeof this.events[e])
        for (r = (a = this.events[e].slice()).length,
        t = 0; t < r; t++)
            a[t].apply(this, i)
}
,
EventEmitter.prototype.once = function(t, a) {
    this.on(t, function e() {
        this.removeListener(t, e),
        a.apply(this, arguments)
    })
}
;
var artwork = {};
function calculateDistance(e, t, a, r) {
    var i = a - e
      , s = r - t;
    return Math.sqrt(i * i + s * s)
}
function calculateAngle(e, t, a, r) {
    var i = a - e
      , s = t - r
      , o = Math.atan2(i, s)
      , n = Math.floor(180 * o / Math.PI);
    return n < 0 ? n + 360 : n
}
function findDirection(e) {
    var t = Math.floor((e + 22.5) / 45);
    return 7 < t ? 0 : t
}
function CritterContainer(e) {
    createjs.MovieClip.call(this);
    var t = critterData[e];
    this.state = "stand",
    this.isMoving = !1,
    this.isForward = !0,
    this.currentDirection = 4,
    this.framerate = 30,
    this.loop = -1,
    this.regX = 68,
    this.regY = 140;
    var a = new createjs.SpriteSheet(t);
    this.bodyContainer = new createjs.Container,
    this.feetContainer = new createjs.Container,
    this.baseContainer = new createjs.Container,
    this.addChild(this.baseContainer, this.feetContainer, this.bodyContainer),
    this.skin = new createjs.Container,
    this.face = new createjs.Container,
    this.feet = new createjs.Container,
    this.skin.sprite = new createjs.Sprite(a,"body4"),
    this.skin.addChild(this.skin.sprite),
    this.face.sprite = new createjs.Sprite(a,"smile4"),
    this.face.addChild(this.face.sprite),
    this.feet.sprite = new createjs.Sprite(a,"feet"),
    this.feetContainer.addChild(this.feet.sprite),
    this.slots = {
        eyes: new createjs.Container,
        ears: new createjs.Container,
        head: new createjs.Container,
        belt: new createjs.Container,
        body: new createjs.Container,
        pack: new createjs.Container,
        back: new createjs.Container
    },
    this.forward = [this.slots.pack, this.slots.back, this.skin, this.face, this.slots.body, this.slots.belt, this.slots.head, this.slots.ears, this.slots.eyes],
    this.backward = [this.slots.back, this.slots.eyes, this.skin, this.face, this.slots.belt, this.slots.body, this.slots.head, this.slots.ears, this.slots.pack];
    for (var r = 0; r < this.forward.length; r++)
        this.bodyContainer.addChild(this.forward[r]);
    t.animations.shadow && (this.baseContainer.sprite = new createjs.Sprite(a,"shadow"),
    this.baseContainer.addChild(this.baseContainer.sprite)),
    this.timeline.addTween(createjs.Tween.get(this.bodyContainer).wait(1).to({
        y: 4
    }).wait(1).to({
        y: -12
    }).wait(1).to({
        y: -16
    }).wait(1).to({
        y: -8
    }).wait(1)),
    this.timeline.addTween(createjs.Tween.get(this.feetContainer).wait(2).to({
        y: -8
    }).wait(1).to({
        y: -16
    }).wait(1).to({
        y: -6
    }).wait(1)),
    this.timeline.addTween(createjs.Tween.get(this.baseContainer)),
    this.updateDirection(),
    this.stop()
}
function ItemSprite(e) {
    var t = new createjs.Sprite(itemSS,e + "3");
    return t.name = e,
    t
}
function ItemContainer(e, t, a) {
    if (createjs.Container.call(this),
    this.itemId = e,
    this.isActive = t || !1,
    this.background = new createjs.Sprite(uxSS,"item"),
    this.addChild(this.background),
    t && this.background.gotoAndStop("item-active"),
    e) {
        var r = new createjs.Bitmap("media/icons/viking.png");
        r.scaleX = .3,
        r.scaleY = .3,
        r.x = 10,
        r.y = 10,
        this.addChild(r)
    }
    this.on("click", function() {
        this.isActive ? (this.background.gotoAndStop("item"),
        this.isActive = !1) : (this.background.gotoAndStop("item-active"),
        this.isActive = !0),
        a && a(this.isActive)
    })
}
function MascotContainer(e) {
    createjs.MovieClip.call(this),
    this.scaleX = 1,
    this.scaleY = 1,
    this.framerate = 30,
    this.loop = -1,
    this.currentDirection,
    this.directionFrames = [0, 1, 3, 3, 4, 5, 5, 7];
    var t = new createjs.SpriteSheet(e);
    this.sprite = new createjs.Sprite(t,"body4"),
    this.addChild(this.sprite),
    this.stop()
}
function PlayerContainer(e, t) {
    createjs.Container.call(this),
    this.playerId = e.i,
    this.isLocal = !1,
    this.critterId = e.c,
    this.isMoving = !1,
    this.nickname,
    this.balloon,
    this.direction = 0,
    this.animation = "none",
    this.speed = 5,
    "RocketSnail" == e.n ? this.critter = new MascotContainer(mascotData.snail) : this.critter = new CritterContainer(this.critterId),
    this.critter.scaleX = .5,
    this.critter.scaleY = .5,
    e.g && this.updateGear(e.g),
    this.addChild(this.critter)
}
artwork.crosshair = new createjs.Shape,
artwork.crosshair.graphics.setStrokeStyle(1).beginStroke("black").moveTo(-10, 0).lineTo(10, 0).moveTo(0, -10).lineTo(0, 10),
CritterContainer.prototype = Object.create(createjs.MovieClip.prototype),
CritterContainer.prototype.addItem = function(e, t) {
    if ("pack" == e)
        this.removeItem("pack"),
        this.removeItem("belt"),
        this.slots.pack.addChild(new ItemSprite(t + "_BACK")),
        this.slots.belt.addChild(new ItemSprite(t)),
        this.updateDirection();
    else if ("ears" == e)
        this.removeItem("ears"),
        this.removeItem("back"),
        this.slots.ears.addChild(new ItemSprite(t)),
        this.slots.back.addChild(new ItemSprite(t + "_BACK")),
        this.updateDirection();
    else {
        var a = this.slots[e];
        a && (this.removeItem(e),
        a.addChild(new ItemSprite(t)),
        this.updateDirection())
    }
}
,
CritterContainer.prototype.removeItem = function(e) {
    "pack" == e ? (this.slots.pack.removeAllChildren(),
    this.slots.belt.removeAllChildren()) : "ears" == e ? (this.slots.ears.removeAllChildren(),
    this.slots.back.removeAllChildren()) : this.slots[e].removeAllChildren()
}
,
CritterContainer.prototype.updateGear = function(e) {
    for (var t in this.slots)
        this.removeItem(t);
    for (var t in e)
        this.addItem(t, e[t])
}
,
CritterContainer.prototype.updateDirection = function(e) {
    for (var t in void 0 === e && (e = this.currentDirection),
    1 < e && e < 7 ? (this.isForward || (this.isForward = !0,
    this.updateDepth()),
    this.face.sprite.gotoAndStop("smile" + e),
    this.face.visible = !0) : (this.isForward && (this.isForward = !1,
    this.updateDepth()),
    this.face.visible = !1),
    this.slots) {
        var a = this.slots[t];
        if (a.children[0]) {
            var r = a.children[0]
              , i = r.name + e;
            itemData.animations[i] ? (r.gotoAndStop(i),
            a.visible = !0) : a.visible = !1
        }
    }
    this.skin.sprite.gotoAndStop("body" + e),
    this.currentDirection = e
}
,
CritterContainer.prototype.updateDepth = function() {
    if (this.isForward)
        var e = this.forward;
    else
        e = this.backward;
    for (var t = 0; t < e.length; t++) {
        var a = e[t];
        this.bodyContainer.setChildIndex(a, t)
    }
}
,
CritterContainer.prototype.updateState = function(e) {
    "move" == e ? (this.state = e,
    this.gotoAndPlay(0)) : (this.state = e,
    this.gotoAndStop(0))
}
,
ItemContainer.prototype = Object.create(createjs.Container.prototype),
MascotContainer.prototype = Object.create(createjs.MovieClip.prototype),
MascotContainer.prototype.updateDirection = function(e) {
    void 0 === e ? e = this.currentDirection : this.currentDirection = e;
    var t = this.directionFrames[e];
    null != t && this.sprite.gotoAndStop("body" + t)
}
,
MascotContainer.prototype.addItem = function() {}
,
MascotContainer.prototype.removeItem = function() {}
,
MascotContainer.prototype.updateGear = function() {}
,
MascotContainer.prototype.updateState = function(e) {
    "move" == e ? this.sprite.gotoAndPlay("body" + this.currentDirection) : this.updateDirection()
}
,
PlayerContainer.prototype = Object.create(createjs.Container.prototype),
PlayerContainer.prototype.updateDirection = function(e) {
    this.direction = e,
    this.critter.updateDirection(e)
}
,
PlayerContainer.prototype.updateRotation = function(e) {
    this.character.rotation = e
}
,
PlayerContainer.prototype.updateState = function(e) {
    this.critter.updateState(e)
}
,
PlayerContainer.prototype.updateGear = function(e) {
    this.critter.updateGear(e)
}
;
var critterData = {
    hamster: {
        images: ["media/critters/hamster.png"],
        frames: [[1, 1, 65, 99, 0, -36, -43], [1, 102, 65, 99, 0, -36, -43], [1, 102, 65, 99, 0, -36, -43], [68, 1, 65, 99, 0, -36, -43], [68, 1, 65, 99, 0, -36, -43], [68, 102, 65, 99, 0, -36, -43], [135, 1, 65, 98, 0, -36, -44], [135, 101, 65, 98, 0, -36, -44], [1, 203, 60, 23, 0, -38, -129], [63, 203, 40, 41, 0, -48, -58], [105, 203, 36, 41, 0, -60, -58], [105, 203, 36, 41, 0, -60, -58], [143, 201, 50, 51, 0, -43, -97], [195, 201, 36, 41, 0, -40, -58], [195, 201, 36, 41, 0, -40, -58]],
        animations: {
            body1: {
                frames: [0]
            },
            body2: {
                frames: [1]
            },
            body3: {
                frames: [2]
            },
            body5: {
                frames: [3]
            },
            body6: {
                frames: [4]
            },
            body7: {
                frames: [5]
            },
            body0: {
                frames: [6]
            },
            body4: {
                frames: [7]
            },
            shadow: {
                frames: [8]
            },
            smile4: {
                frames: [9]
            },
            smile2: {
                frames: [10]
            },
            smile3: {
                frames: [11]
            },
            feet: {
                frames: [12]
            },
            smile5: {
                frames: [13]
            },
            smile6: {
                frames: [14]
            }
        }
    }
}
  , itemData = {
    framerate: 10,
    frames: [[1, 1, 112, 129, 0, -12, -5], [1, 132, 112, 128, 0, -12, -1], [115, 1, 105, 126, 0, -1, -5], [1, 262, 105, 126, 0, -30, -5], [115, 129, 90, 126, 0, 0, -2], [115, 129, 90, 126, 0, 0, -2], [222, 1, 90, 126, 0, -46, -2], [222, 1, 90, 126, 0, -46, -2], [1, 390, 92, 89, 0, -22, -21], [207, 129, 92, 89, 0, -22, -21], [314, 1, 92, 89, 0, -22, -21], [1, 481, 92, 89, 0, -22, -21], [408, 1, 92, 89, 0, -22, -21], [1, 572, 92, 89, 0, -22, -21], [1, 663, 78, 40, 0, -27, -89], [1, 663, 78, 40, 0, -27, -89], [502, 1, 89, 89, 0, -22, -21], [502, 1, 89, 89, 0, -22, -21], [593, 1, 89, 89, 0, -25, -21], [593, 1, 89, 89, 0, -25, -21], [684, 1, 89, 89, 0, -22, -21], [684, 1, 89, 89, 0, -22, -21], [775, 1, 89, 89, 0, -22, -21], [775, 1, 89, 89, 0, -22, -21], [866, 1, 88, 89, 0, -26, -21], [866, 1, 88, 89, 0, -26, -21], [956, 1, 67, 56, 0, -35, -23], [81, 663, 78, 40, 0, -31, -89], [81, 663, 78, 40, 0, -31, -89], [207, 220, 88, 89, 0, -26, -21], [207, 220, 88, 89, 0, -26, -21], [314, 92, 86, 90, 0, -28, -20], [402, 92, 86, 90, 0, -22, -20], [490, 92, 86, 90, 0, -28, -20], [578, 92, 86, 87, 0, -22, -23], [666, 92, 86, 87, 0, -28, -23], [754, 92, 86, 87, 0, -22, -23], [842, 92, 74, 81, 0, -32, -26], [842, 92, 74, 81, 0, -32, -26], [842, 92, 74, 81, 0, -32, -26], [918, 92, 74, 81, 0, -30, -26], [918, 92, 74, 81, 0, -30, -26], [918, 92, 74, 81, 0, -30, -26], [918, 92, 74, 81, 0, -30, -26], [918, 92, 74, 81, 0, -30, -26], [301, 184, 85, 61, 0, -24, -18], [388, 184, 85, 68, 0, -18, -28], [475, 184, 85, 68, 0, -33, -29], [297, 247, 79, 69, 0, -32, -31], [297, 247, 79, 69, 0, -32, -31], [378, 254, 76, 77, 0, -31, -31], [378, 254, 76, 77, 0, -31, -31], [378, 254, 76, 77, 0, -31, -31], [378, 254, 76, 77, 0, -31, -31], [378, 254, 76, 77, 0, -31, -31], [456, 254, 75, 77, 0, -30, -31], [456, 254, 75, 77, 0, -30, -31], [456, 254, 75, 77, 0, -30, -31], [533, 254, 74, 70, 0, -27, -29], [956, 59, 60, 26, 0, -38, -63], [994, 87, 29, 43, 0, -27, -63], [994, 132, 29, 38, 0, -80, -63], [994, 132, 29, 38, 0, -80, -63], [842, 175, 82, 56, 0, -27, -19], [926, 175, 74, 57, 0, -30, -49], [926, 175, 74, 57, 0, -30, -49], [115, 257, 80, 45, 0, -37, -34], [108, 304, 76, 70, 0, -26, -27], [186, 311, 78, 59, 0, -29, -49], [266, 318, 77, 54, 0, -29, -22], [108, 376, 78, 41, 0, -29, -89], [95, 419, 68, 67, 0, -36, -31], [95, 419, 68, 67, 0, -36, -31], [95, 488, 71, 60, 0, -31, -27], [95, 550, 71, 60, 0, -34, -27], [188, 372, 76, 45, 0, -22, -32], [188, 372, 76, 45, 0, -22, -32], [165, 419, 74, 59, 0, -30, -81], [165, 419, 74, 59, 0, -30, -81], [168, 480, 74, 59, 0, -32, -81], [168, 480, 74, 59, 0, -32, -81], [168, 541, 71, 59, 0, -31, -28], [266, 374, 77, 45, 0, -38, -32], [266, 374, 77, 45, 0, -38, -32], [95, 612, 78, 47, 0, -29, -49], [95, 612, 78, 47, 0, -29, -49], [95, 612, 78, 47, 0, -29, -49], [175, 602, 69, 57, 0, -37, -49], [175, 602, 69, 57, 0, -37, -49], [241, 421, 77, 55, 0, -31, -21], [241, 421, 77, 55, 0, -31, -21], [244, 478, 71, 59, 0, -34, -28], [161, 661, 62, 40, 0, -37, -37], [345, 333, 77, 55, 0, -28, -21], [345, 333, 77, 55, 0, -28, -21], [424, 333, 77, 54, 0, -30, -22], [345, 390, 79, 45, 0, -20, -34], [426, 389, 80, 45, 0, -37, -34], [320, 437, 80, 45, 0, -37, -34], [317, 484, 72, 55, 0, -32, -85], [503, 333, 69, 53, 0, -34, -89], [508, 388, 69, 46, 0, -34, -41], [508, 388, 69, 46, 0, -34, -41], [508, 388, 69, 46, 0, -34, -41], [574, 326, 71, 59, 0, -31, -28], [579, 387, 69, 47, 0, -37, -49], [578, 181, 79, 45, 0, -20, -34], [659, 181, 79, 45, 0, -20, -34], [740, 181, 77, 45, 0, -38, -32], [740, 181, 77, 45, 0, -38, -32], [609, 228, 71, 59, 0, -34, -28], [682, 228, 71, 59, 0, -32, -28], [755, 228, 71, 58, 0, -32, -29], [828, 233, 72, 56, 0, -31, -28], [828, 233, 72, 56, 0, -31, -28], [902, 234, 72, 56, 0, -31, -28], [902, 234, 72, 56, 0, -31, -28], [609, 289, 73, 26, 0, -33, -63], [609, 289, 73, 26, 0, -33, -63], [684, 289, 73, 26, 0, -30, -63], [684, 289, 73, 26, 0, -30, -63], [647, 317, 72, 58, 0, -31, -26], [647, 317, 72, 58, 0, -31, -26], [650, 377, 71, 58, 0, -32, -29], [721, 317, 71, 58, 0, -34, -26], [721, 317, 71, 58, 0, -34, -26], [723, 377, 69, 56, 0, -30, -49], [759, 288, 60, 26, 0, -38, -63], [821, 291, 77, 45, 0, -38, -32], [821, 291, 77, 45, 0, -38, -32], [900, 292, 76, 45, 0, -22, -32], [900, 292, 76, 45, 0, -22, -32], [794, 338, 71, 56, 0, -34, -28], [794, 338, 71, 56, 0, -34, -28], [794, 396, 76, 45, 0, -22, -32], [794, 396, 76, 45, 0, -22, -32], [867, 339, 71, 55, 0, -33, -26], [872, 396, 69, 46, 0, -33, -41], [872, 396, 69, 46, 0, -33, -41], [872, 396, 69, 46, 0, -33, -41], [872, 396, 69, 46, 0, -33, -41], [872, 396, 69, 46, 0, -33, -41], [940, 339, 69, 53, 0, -34, -89], [943, 394, 72, 52, 0, -32, -88], [723, 435, 69, 53, 0, -34, -89], [723, 435, 69, 53, 0, -34, -89], [794, 443, 73, 51, 0, -31, -89], [869, 444, 71, 53, 0, -33, -28], [942, 448, 73, 51, 0, -32, -89], [244, 539, 71, 53, 0, -33, -28], [317, 541, 71, 56, 0, -34, -28], [317, 541, 71, 56, 0, -34, -28], [246, 594, 69, 53, 0, -34, -89], [317, 599, 69, 53, 0, -34, -89], [317, 599, 69, 53, 0, -34, -89], [246, 649, 69, 53, 0, -34, -89], [317, 654, 68, 46, 0, -34, -94], [426, 436, 73, 26, 0, -33, -63], [426, 436, 73, 26, 0, -33, -63], [501, 436, 73, 26, 0, -30, -63], [501, 436, 73, 26, 0, -30, -63], [576, 436, 69, 53, 0, -34, -21], [647, 437, 66, 57, 0, -35, -22], [562, 228, 29, 24, 0, -74, -63], [715, 490, 68, 46, 0, -34, -94], [785, 496, 68, 46, 0, -34, -94], [785, 496, 68, 46, 0, -34, -94], [855, 499, 68, 46, 0, -34, -94], [925, 501, 68, 46, 0, -34, -94], [925, 501, 68, 46, 0, -34, -94], [391, 484, 66, 56, 0, -34, -20], [391, 484, 66, 56, 0, -34, -20], [390, 542, 66, 56, 0, -36, -20], [390, 542, 66, 56, 0, -36, -20], [388, 600, 66, 57, 0, -35, -22], [387, 659, 62, 44, 0, -37, -34], [451, 659, 62, 44, 0, -37, -34], [459, 464, 65, 51, 0, -36, -89], [459, 517, 68, 46, 0, -34, -94], [458, 565, 65, 51, 0, -36, -89], [456, 618, 62, 37, 0, -37, -37], [515, 657, 65, 46, 0, -36, -94], [582, 491, 62, 45, 0, -37, -33], [646, 496, 65, 50, 0, -36, -90], [646, 496, 65, 50, 0, -36, -90], [529, 491, 51, 51, 0, -53, -18], [582, 538, 62, 45, 0, -37, -33], [529, 544, 51, 48, 0, -27, -22], [646, 548, 65, 51, 0, -36, -89], [713, 538, 65, 51, 0, -36, -89], [780, 544, 65, 50, 0, -36, -90], [780, 544, 65, 50, 0, -36, -90], [847, 547, 65, 46, 0, -36, -94], [914, 549, 65, 46, 0, -36, -94], [914, 549, 65, 46, 0, -36, -94], [582, 585, 62, 45, 0, -37, -33], [646, 601, 65, 46, 0, -36, -94], [713, 591, 65, 46, 0, -36, -94], [713, 591, 65, 46, 0, -36, -94], [780, 596, 65, 46, 0, -36, -94], [847, 595, 62, 44, 0, -37, -34], [911, 597, 62, 43, 0, -36, -33], [911, 597, 62, 43, 0, -36, -33], [582, 632, 62, 43, 0, -38, -33], [582, 632, 62, 43, 0, -38, -33], [646, 649, 61, 45, 0, -37, -33], [525, 594, 54, 51, 0, -57, -19], [525, 594, 54, 51, 0, -57, -19], [713, 639, 61, 45, 0, -38, -33], [776, 644, 54, 51, 0, -25, -19], [776, 644, 54, 51, 0, -25, -19], [832, 644, 52, 51, 0, -32, -18], [886, 642, 51, 48, 0, -58, -22], [939, 642, 29, 30, 0, -27, -63], [939, 642, 29, 30, 0, -27, -63], [976, 234, 29, 30, 0, -80, -63], [976, 266, 29, 24, 0, -33, -63], [526, 464, 29, 24, 0, -74, -63], [582, 677, 29, 24, 0, -33, -63]],
    animations: {
        backpack_green_BACK0: {
            frames: [0]
        },
        backpack_green_BACK4: {
            frames: [1]
        },
        backpack_green_BACK1: {
            frames: [2]
        },
        backpack_green_BACK7: {
            frames: [3]
        },
        backpack_green_BACK2: {
            frames: [4]
        },
        backpack_green_BACK3: {
            frames: [5]
        },
        backpack_green_BACK5: {
            frames: [6]
        },
        backpack_green_BACK6: {
            frames: [7]
        },
        bunny_blue0: {
            frames: [8]
        },
        bunny_blue4: {
            frames: [9]
        },
        bunny_pink0: {
            frames: [10]
        },
        bunny_pink4: {
            frames: [11]
        },
        bunny_white0: {
            frames: [12]
        },
        bunny_white4: {
            frames: [13]
        },
        backpack_green2: {
            frames: [14]
        },
        backpack_green3: {
            frames: [15]
        },
        bunny_blue5: {
            frames: [16]
        },
        bunny_blue6: {
            frames: [17]
        },
        bunny_pink2: {
            frames: [18]
        },
        bunny_pink3: {
            frames: [19]
        },
        bunny_pink5: {
            frames: [20]
        },
        bunny_pink6: {
            frames: [21]
        },
        bunny_white5: {
            frames: [22]
        },
        bunny_white6: {
            frames: [23]
        },
        bunny_blue2: {
            frames: [24]
        },
        bunny_blue3: {
            frames: [25]
        },
        viking0: {
            frames: [26]
        },
        backpack_green5: {
            frames: [27]
        },
        backpack_green6: {
            frames: [28]
        },
        bunny_white2: {
            frames: [29]
        },
        bunny_white3: {
            frames: [30]
        },
        bunny_blue1: {
            frames: [31]
        },
        bunny_pink7: {
            frames: [32]
        },
        bunny_white1: {
            frames: [33]
        },
        bunny_blue7: {
            frames: [34]
        },
        bunny_pink1: {
            frames: [35]
        },
        bunny_white7: {
            frames: [36]
        },
        easteregg_c0: {
            frames: [37]
        },
        easteregg_c1: {
            frames: [38]
        },
        easteregg_c7: {
            frames: [39]
        },
        easteregg_c2: {
            frames: [40]
        },
        easteregg_c3: {
            frames: [41]
        },
        easteregg_c4: {
            frames: [42]
        },
        easteregg_c5: {
            frames: [43]
        },
        easteregg_c6: {
            frames: [44]
        },
        paperhat0: {
            frames: [45]
        },
        sleeping0: {
            frames: [46]
        },
        sleeping4: {
            frames: [47]
        },
        sleeping2: {
            frames: [48]
        },
        sleeping3: {
            frames: [49]
        },
        easteregg_a2: {
            frames: [50]
        },
        easteregg_a3: {
            frames: [51]
        },
        easteregg_a4: {
            frames: [52]
        },
        easteregg_a5: {
            frames: [53]
        },
        easteregg_a6: {
            frames: [54]
        },
        easteregg_a0: {
            frames: [55]
        },
        easteregg_a1: {
            frames: [56]
        },
        easteregg_a7: {
            frames: [57]
        },
        sleeping1: {
            frames: [58]
        },
        "3d_black4": {
            frames: [59]
        },
        headphones_white_BACK1: {
            frames: [60]
        },
        headphones_white_BACK2: {
            frames: [61]
        },
        headphones_white_BACK3: {
            frames: [62]
        },
        paperhat4: {
            frames: [63]
        },
        headphones_white2: {
            frames: [64]
        },
        headphones_white3: {
            frames: [65]
        },
        ballcap_black1: {
            frames: [66]
        },
        sleeping7: {
            frames: [67]
        },
        headphones_white4: {
            frames: [68]
        },
        paperhat1: {
            frames: [69]
        },
        backpack_green4: {
            frames: [70]
        },
        sleeping5: {
            frames: [71]
        },
        sleeping6: {
            frames: [72]
        },
        toque_white1: {
            frames: [73]
        },
        toque_white7: {
            frames: [74]
        },
        ballcap_black5: {
            frames: [75]
        },
        ballcap_black6: {
            frames: [76]
        },
        hoodie_blue2: {
            frames: [77]
        },
        hoodie_blue3: {
            frames: [78]
        },
        hoodie_blue5: {
            frames: [79]
        },
        hoodie_blue6: {
            frames: [80]
        },
        toque_blue1: {
            frames: [81]
        },
        ballcap_black2: {
            frames: [82]
        },
        ballcap_black3: {
            frames: [83]
        },
        headphones_white0: {
            frames: [84]
        },
        headphones_white_BACK0: {
            frames: [85]
        },
        headphones_white_BACK4: {
            frames: [86]
        },
        headphones_white5: {
            frames: [87]
        },
        headphones_white6: {
            frames: [88]
        },
        paperhat2: {
            frames: [89]
        },
        paperhat3: {
            frames: [90]
        },
        toque_blue7: {
            frames: [91]
        },
        propeller0: {
            frames: [92]
        },
        paperhat5: {
            frames: [93]
        },
        paperhat6: {
            frames: [94]
        },
        paperhat7: {
            frames: [95]
        },
        ballcap_black7: {
            frames: [96]
        },
        ballcap_blue1: {
            frames: [97]
        },
        ballcap_green1: {
            frames: [98]
        },
        hoodie_blue4: {
            frames: [99]
        },
        pirate_capt_black0: {
            frames: [100]
        },
        easteregg_b0: {
            frames: [101]
        },
        easteregg_b1: {
            frames: [102]
        },
        easteregg_b7: {
            frames: [103]
        },
        toque_pink1: {
            frames: [104]
        },
        headphones_white1: {
            frames: [105]
        },
        ballcap_blue7: {
            frames: [106]
        },
        ballcap_green7: {
            frames: [107]
        },
        ballcap_blue2: {
            frames: [108]
        },
        ballcap_blue3: {
            frames: [109]
        },
        toque_pink7: {
            frames: [110]
        },
        toque_white0: {
            frames: [111]
        },
        toque_blue0: {
            frames: [112]
        },
        toque_blue2: {
            frames: [113]
        },
        toque_blue3: {
            frames: [114]
        },
        toque_pink2: {
            frames: [115]
        },
        toque_pink3: {
            frames: [116]
        },
        "3d_black2": {
            frames: [117]
        },
        "3d_black3": {
            frames: [118]
        },
        "3d_black5": {
            frames: [119]
        },
        "3d_black6": {
            frames: [120]
        },
        toque_white2: {
            frames: [121]
        },
        toque_white3: {
            frames: [122]
        },
        toque_pink0: {
            frames: [123]
        },
        toque_white5: {
            frames: [124]
        },
        toque_white6: {
            frames: [125]
        },
        headphones_white7: {
            frames: [126]
        },
        "3d_white4": {
            frames: [127]
        },
        ballcap_green2: {
            frames: [128]
        },
        ballcap_green3: {
            frames: [129]
        },
        ballcap_blue5: {
            frames: [130]
        },
        ballcap_blue6: {
            frames: [131]
        },
        toque_blue5: {
            frames: [132]
        },
        toque_blue6: {
            frames: [133]
        },
        ballcap_green5: {
            frames: [134]
        },
        ballcap_green6: {
            frames: [135]
        },
        toque_white4: {
            frames: [136]
        },
        easteregg_b2: {
            frames: [137]
        },
        easteregg_b3: {
            frames: [138]
        },
        easteregg_b4: {
            frames: [139]
        },
        easteregg_b5: {
            frames: [140]
        },
        easteregg_b6: {
            frames: [141]
        },
        pirate_capt_black1: {
            frames: [142]
        },
        hoodie_blue0: {
            frames: [143]
        },
        pirate_capt_black2: {
            frames: [144]
        },
        pirate_capt_black3: {
            frames: [145]
        },
        hoodie_blue1: {
            frames: [146]
        },
        toque_blue4: {
            frames: [147]
        },
        hoodie_blue7: {
            frames: [148]
        },
        toque_pink4: {
            frames: [149]
        },
        toque_pink5: {
            frames: [150]
        },
        toque_pink6: {
            frames: [151]
        },
        pirate_capt_black4: {
            frames: [152]
        },
        pirate_capt_black5: {
            frames: [153]
        },
        pirate_capt_black6: {
            frames: [154]
        },
        pirate_capt_black7: {
            frames: [155]
        },
        plaid_red0: {
            frames: [156]
        },
        "3d_white2": {
            frames: [157]
        },
        "3d_white3": {
            frames: [158]
        },
        "3d_white5": {
            frames: [159]
        },
        "3d_white6": {
            frames: [160]
        },
        viking4: {
            frames: [161]
        },
        viking1: {
            frames: [162]
        },
        "3d_black1": {
            frames: [163]
        },
        plaid_red1: {
            frames: [164]
        },
        plaid_red2: {
            frames: [165]
        },
        plaid_red3: {
            frames: [166]
        },
        plaid_red4: {
            frames: [167]
        },
        plaid_red5: {
            frames: [168]
        },
        plaid_red6: {
            frames: [169]
        },
        viking2: {
            frames: [170]
        },
        viking3: {
            frames: [171]
        },
        viking5: {
            frames: [172]
        },
        viking6: {
            frames: [173]
        },
        viking7: {
            frames: [174]
        },
        ballcap_black4: {
            frames: [175]
        },
        ballcap_blue4: {
            frames: [176]
        },
        space_red0: {
            frames: [177]
        },
        plaid_red7: {
            frames: [178]
        },
        space_red1: {
            frames: [179]
        },
        propeller4: {
            frames: [180]
        },
        tshirt_white0: {
            frames: [181]
        },
        ballcap_black0: {
            frames: [182]
        },
        space_red2: {
            frames: [183]
        },
        space_red3: {
            frames: [184]
        },
        party_green1: {
            frames: [185]
        },
        ballcap_blue0: {
            frames: [186]
        },
        party_green0: {
            frames: [187]
        },
        space_red4: {
            frames: [188]
        },
        space_red7: {
            frames: [189]
        },
        space_red5: {
            frames: [190]
        },
        space_red6: {
            frames: [191]
        },
        tshirt_white1: {
            frames: [192]
        },
        tshirt_white2: {
            frames: [193]
        },
        tshirt_white3: {
            frames: [194]
        },
        ballcap_green0: {
            frames: [195]
        },
        tshirt_white4: {
            frames: [196]
        },
        tshirt_white5: {
            frames: [197]
        },
        tshirt_white6: {
            frames: [198]
        },
        tshirt_white7: {
            frames: [199]
        },
        ballcap_green4: {
            frames: [200]
        },
        propeller2: {
            frames: [201]
        },
        propeller3: {
            frames: [202]
        },
        propeller5: {
            frames: [203]
        },
        propeller6: {
            frames: [204]
        },
        propeller1: {
            frames: [205]
        },
        party_green2: {
            frames: [206]
        },
        party_green3: {
            frames: [207]
        },
        propeller7: {
            frames: [208]
        },
        party_green5: {
            frames: [209]
        },
        party_green6: {
            frames: [210]
        },
        party_green7: {
            frames: [211]
        },
        party_green4: {
            frames: [212]
        },
        headphones_white_BACK5: {
            frames: [213]
        },
        headphones_white_BACK6: {
            frames: [214]
        },
        headphones_white_BACK7: {
            frames: [215]
        },
        "3d_black7": {
            frames: [216]
        },
        "3d_white1": {
            frames: [217]
        },
        "3d_white7": {
            frames: [218]
        }
    },
    images: ["media/items/items.png"]
}
  , itemSS = new createjs.SpriteSheet(itemData)
  , mascotData = {
    snail: {
        critterId: "snail",
        images: ["/media/critters/snail.png"],
        type: "sprite",
        framerate: 10,
        frames: [[1, 1, 83, 103, 0, 38, 98], [86, 1, 83, 103, 0, 44, 98], [171, 1, 81, 105, 0, 38, 100], [254, 1, 83, 105, 0, 34, 97], [339, 1, 83, 105, 0, 46, 97], [424, 1, 81, 105, 0, 43, 100], [1, 106, 81, 106, 0, 34, 97], [84, 106, 81, 106, 0, 48, 97], [167, 108, 55, 110, 0, 27, 95], [224, 108, 55, 111, 0, 27, 100], [281, 108, 59, 111, 0, 29, 100], [342, 108, 59, 112, 0, 29, 104], [403, 108, 105, 113, 0, 40, 106], [1, 214, 105, 113, 0, 63, 106], [108, 220, 97, 114, 0, 38, 107], [207, 221, 97, 114, 0, 59, 106]],
        animations: {
            body1: {
                frames: [2, 0]
            },
            body7: {
                frames: [5, 1]
            },
            body3: {
                frames: [6, 3]
            },
            body5: {
                frames: [7, 4]
            },
            body0: {
                frames: [8, 9]
            },
            body4: {
                frames: [10, 11]
            },
            body2: {
                frames: [14, 12]
            },
            body6: {
                frames: [15, 13]
            }
        }
    }
}
  , uxData = {
    images: ["media/ux/ux.png"],
    frames: [[1, 1, 104, 86, 0, 0, 0], [107, 1, 84, 84, 0, 0, 0], [193, 1, 84, 84, 0, 0, 0], [279, 1, 40, 40, 0, 0, 0], [279, 43, 40, 40, 0, 0, 0]],
    animations: {
        box: {
            frames: [0]
        },
        item_active: {
            frames: [1]
        },
        item: {
            frames: [2]
        },
        close: {
            frames: [3]
        },
        open_btn: {
            frames: [4]
        }
    }
}
  , uxSS = new createjs.SpriteSheet(uxData);
function InventoryScreen(e) {
    createjs.Container.call(this),
    this.player = e,
    this.name = "inventory",
    this.background = new createjs.Shape(art.background),
    this.background.alpha = .6,
    this.background.on("click", function() {}),
    this.addChild(this.background),
    this.hasChanged = !1,
    this.handleOpen,
    this.handleClose;
    var t = new Button("close");
    t.click(function() {
        console.log(this.parent)
    }),
    t.x = 750,
    t.y = 50,
    t.click(function() {
        this.parent.close()
    }),
    this.addChild(t),
    this.critter = new CritterContainer("hamster"),
    this.critter.x = 700,
    this.critter.y = 300,
    this.critter.updateGear(e.gear),
    this.addChild(this.critter),
    this.grid = new createjs.Container,
    this.grid.x = 20,
    this.grid.y = 40,
    this.addChild(this.grid),
    this.showIcons()
}
InventoryScreen.prototype = Object.create(createjs.Container.prototype),
InventoryScreen.prototype.close = function() {
    socket.emit("updateGear", this.player.gear),
    this.visible = !1
}
,
InventoryScreen.prototype.hide = function() {
    this.visible = !1
}
,
InventoryScreen.prototype.show = function() {
    this.showIcons(),
    this.visible = !0
}
,
InventoryScreen.prototype.showIcons = function() {
    this.grid.removeAllChildren();
    var e = this
      , t = this.critter
      , a = this.player;
    this.icons = [];
    for (var r = 0; r < a.inventory.length; r++) {
        var i = a.inventory[r];
        (n = new ItemIcon(i.itemId,i.slot)).click(function() {
            this.isActive ? (t.removeItem(this.slotId),
            a.removeItem(this.slotId)) : (t.addItem(this.slotId, this.itemId),
            a.addItem(this.itemId)),
            e.updateIcons()
        }),
        this.icons.push(n)
    }
    this.updateIcons();
    var s = 0
      , o = 0;
    for (r = 0; r < this.icons.length; r++) {
        var n;
        (n = this.icons[r]).x = s,
        n.y = o,
        this.grid.addChild(n),
        500 < (s += 100) && (s = 0,
        o += 100)
    }
}
,
InventoryScreen.prototype.updateIcons = function() {
    for (var e = 0; e < this.icons.length; e++) {
        var t = this.icons[e]
          , a = this.player.isItemActive(t.itemId);
        t.setActive(a)
    }
}
;
var art = art || {};
art.background = new createjs.Graphics,
art.background.beginFill("black"),
art.background.drawRect(0, 0, 850, 480);